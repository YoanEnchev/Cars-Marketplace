FROM ubuntu:22.04

WORKDIR /var/www/ec2-deployment-scripts

COPY ./ec2-deployment-scripts .

WORKDIR /var/www/web_app
EXPOSE 80

COPY ./web_app .
COPY ./apache2.conf /etc/apache2/sites-enabled/000-default.conf

CMD sleep 999999999

## Remove old python versions if exist:
#RUN rm -f /usr/bin/python
#
#RUN apt-get update
#RUN apt-get -y install apache2 
#RUN apt-get -y install apache2-utils 
#
#
#
## This will automatically enable mod_cgid if your server is configured with a multi-threaded MPM
#RUN a2enmod cgi
#
## We must register Python with Apache. To start, we disable multithreading processes.
#RUN a2dismod mpm_event
#
## We give Apache explicit permission to run scripts.
#RUN a2enmod mpm_prefork cgi
#
## Enable wsgi
#RUN apt-get -y install libapache2-mod-wsgi-py3
#RUN a2enmod wsgi
#
#
#RUN ln -s /usr/bin/python3 /usr/bin/python
#
#RUN apt-get update
#RUN apt-get -y install python3-pip
#RUN apt-get -y install nano
#
## Necessary for postgreSQL.
#RUN apt-get update
#RUN apt-get -y install libpq-dev python3-dev
#
## Install packages from requirements.txt:
#COPY ./web_app .
#RUN pip3 install -r requirements.txt
#
#
## Install NODE JS:
#ENV NODE_VERSION=16.14.0
#RUN apt install -y curl
#RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
#ENV NVM_DIR=/root/.nvm
#RUN . "$NVM_DIR/nvm.sh" && nvm install ${NODE_VERSION}
#RUN . "$NVM_DIR/nvm.sh" && nvm use v${NODE_VERSION}
#RUN . "$NVM_DIR/nvm.sh" && nvm alias default v${NODE_VERSION}
#ENV PATH="/root/.nvm/versions/node/v${NODE_VERSION}/bin/:${PATH}"
#
#RUN apt-get update
#ARG DEBIAN_FRONTEND=noninteractive
#RUN apt install postgresql-14 postgresql-contrib-14 -y
#
## Install Redis:
#RUN apt-get update
#RUN yes | apt-get install software-properties-common
#RUN add-apt-repository ppa:redislabs/redis
#RUN yes | apt-get install redis
#
#
## Avoids cross-env: not found when executing npm run watch.
#RUN npm install --global cross-env
##RUN cd assets/js
#WORKDIR /var/www/web_app/assets/js
#RUN npm install
#RUN npm run build
##RUN cd ../../
#WORKDIR /var/www/web_app
#
#
#COPY ./apache2.conf /etc/apache2/sites-enabled/000-default.conf
#
#CMD apache2ctl -D FOREGROUND
#
#
#
#
#
#
## What to do:
## service postgresql start
#
## su - postgres
## Open new user
#
## psql -c "CREATE USER ${DB_USER} WITH ENCRYPTED password '${DB_PASSWORD}';"
## psql -c "CREATE DATABASE ${DB_NAME};"
## psql -c "CREATE USER ${DB_USER_TEST} WITH ENCRYPTED password '${DB_PASSWORD_TEST}';"
## psql -c "CREATE DATABASE ${DB_NAME_TEST};"
#
#
## redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD} --port ${REDIS_PORT} && redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD_TEST} } --port ${REDIS_PORT}
## Runs in background.
#
## flask seed
#
#
#
#
#
#
#
#
## psql -c "CREATE USER cars_marketplace_user WITH ENCRYPTED password 'SAMPLE_PASSWORD';"
## psql -c "CREATE DATABASE cars_marketplace;"
## psql -c "CREATE USER ${DB_USER_TEST} WITH ENCRYPTED password '${DB_PASSWORD_TEST}';"
## psql -c "CREATE DATABASE ${DB_NAME_TEST};"